@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore
@inject NwsManager NwsManager
@inject ILogger<NwsManager> Logger
@inject MyWeatherContext DbContext
@rendermode InteractiveServer

<PageTitle>My Weather Hub</PageTitle>

<HeadContent>
	<style>
		.hero-section {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			color: white;
			padding: 3rem 0;
			margin-bottom: 2rem;
			border-radius: 0 0 1rem 1rem;
		}

		.hero-content {
			text-align: center;
		}

		.hero-title {
			font-size: 3rem;
			font-weight: 700;
			margin-bottom: 0.5rem;
			text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
		}

		.hero-subtitle {
			font-size: 1.25rem;
			opacity: 0.9;
			margin-bottom: 0;
		}

		.main-content {
			margin-top: 2rem;
		}

		.zone-selector-card {
			background: white;
			border-radius: 1rem;
			box-shadow: 0 4px 20px rgba(0,0,0,0.08);
			overflow: hidden;
			margin-bottom: 2rem;
		}

		.card-header-custom {
			background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
			padding: 1.5rem;
			border-bottom: 1px solid #dee2e6;
		}

		.card-header-custom h3 {
			margin: 0;
			color: #495057;
			font-weight: 600;
		}

		.instructions-card {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			border-radius: 1rem;
			padding: 2rem;
			color: white;
			box-shadow: 0 4px 20px rgba(0,0,0,0.08);
			margin-bottom: 2rem;
		}

		.instructions-card h3 {
			color: white;
			font-weight: 600;
			margin-bottom: 1.5rem;
			display: flex;
			align-items: center;
			gap: 0.5rem;
		}

		.instructions-card .instruction-item {
			background: rgba(255,255,255,0.2);
			padding: 1rem;
			border-radius: 0.5rem;
			margin-bottom: 1rem;
			backdrop-filter: blur(10px);
			color: white;
		}

		.instructions-card .instruction-item:last-child {
			margin-bottom: 0;
		}



		.weather-icon {
			font-size: 1.5rem;
		}

		.recommended-zones {
			background: rgba(255,255,255,0.15);
			border-left: 4px solid rgba(255,255,255,0.5);
			padding: 1rem;
			border-radius: 0.5rem;
			margin-top: 1rem;
		}

		.recommended-zones .zone-suggestion {
			display: inline-block;
			background: rgba(255,255,255,0.25);
			color: white;
			padding: 0.25rem 0.5rem;
			margin: 0.25rem;
			border-radius: 0.25rem;
			font-size: 0.9rem;
			border: 1px solid rgba(255,255,255,0.3);
			backdrop-filter: blur(5px);
		}

		.instruction-note {
			color: rgba(255,255,255,0.9) !important;
			background: rgba(0,0,0,0.2);
			padding: 0.75rem;
			border-radius: 0.375rem;
			display: block;
			backdrop-filter: blur(5px);
			border: 1px solid rgba(255,255,255,0.2);
		}
	</style>
</HeadContent>

<!-- Hero Section -->
<div class="hero-section">
	<div class="container">
		<div class="hero-content">
			<h1 class="hero-title">
				<span class="weather-icon">🌤️</span>
				My Weather Hub
			</h1>
			<p class="hero-subtitle">Live Weather Reports from the US National Weather Service</p>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-6">
		<WeatherZoneGrid AllZones="AllZones" 
						 SelectedZone="SelectedZone" 
						 OnZoneSelected="SelectZone" 
						 DbContext="DbContext" />
	</div>

	<div class="col-md-6" style="max-width:30em;">
		<p>Click the name of a weather zone from the <a href="https://www.weather.gov/documentation/services-web-api" target="_blank">US National Weather Service</a> and the upcoming weather for that zone will appear below.</p>
		<p>You can sort and filter the list of available weather forecast zones using the column headers of the grid.</p>
		<p>Not all forecast zones will have a forecast available.  For reliable zones, try Philadelphia, Manhattan, District of Columbia, or Los Angeles County San Gabriel Valley</p>
		<p>For a zone that isn't reliably reporting, try Bristol Bay, AK (Alaska)</p>
	</div>

</div>

@if (IsLoading)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
else if (SelectedZone != null && Forecast != null)
{

	<h3>Weather for @SelectedZone.Name<text>, </text> @SelectedZone.State (@SelectedZone.Key)</h3>

	<div class="row row-cols-1 row-cols-md-4 g-4">
		@foreach (var forecast in Forecast.Take(8))
		{

			<div class="col">
				<div class="card">
					<div class="card-header">@forecast.Name</div>
					<div class="card-body">@forecast.DetailedForecast</div>
				</div>
			</div>

		}
	</div>

}
else if (SelectedZone != null && !string.IsNullOrEmpty(Error))
{
	<div class="alert-danger border border-1 border-danger p-3" style="width: 30em">@Error<br />Choose another weather station</div>
}

@code {
	Zone[] AllZones { get; set; } = [];
	Zone SelectedZone { get; set; } = null!;
	IEnumerable<Forecast> Forecast { get; set; } = null!;
	string Error { get; set; } = string.Empty;
	bool IsLoading = false;

	protected override async Task OnInitializedAsync()
	{
		AllZones = (await NwsManager.GetZonesAsync()).ToArray();
	}

	private async Task SelectZone(Zone zone)
	{
		// Workaround to create a new trace
		// Blazor server keeps connection open so a new trace isn't created
		Activity.Current = null;

		SelectedZone = zone;
		IsLoading = true;
		StateHasChanged();
		await Task.Delay(50);

		try
		{
			IsLoading = false;
			Forecast = await NwsManager.GetForecastByZoneAsync(zone.Key);
			Error = string.Empty;
		}
		catch (Exception ex)
		{
			IsLoading = false;
			Logger.LogError(ex, "Error getting forecast for {0}({1})", zone.Name, zone.Key);
			Forecast = null!;
			Error = $"Unable to locate weather for {SelectedZone.Name}({SelectedZone.Key})";
		}

	}

}