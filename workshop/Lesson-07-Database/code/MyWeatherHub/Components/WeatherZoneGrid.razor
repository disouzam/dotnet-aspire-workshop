@using Microsoft.EntityFrameworkCore

<div class="form-check mb-3">
    <input class="form-check-input" type="checkbox" @bind="ShowOnlyFavorites" id="showFavorites">
    <label class="form-check-label" for="showFavorites">
        Show only favorites
    </label>
</div>

<QuickGrid Items="zones" TGridItem="Zone" Pagination="pagination">
    <TemplateColumn Title="Name" SortBy="NameSort" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="Name..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <span class="link-primary @(SelectedZone == context ? "selectedCell" : "")" style="cursor: pointer;" @onclick="@(() => OnZoneSelected.InvokeAsync(context))">@context.Name</span>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="State">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="StateFilter" @bind:event="oninput" placeholder="State..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <span class="@(SelectedZone == context ? "selectedCell" : "")">@context.State</span>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Favorite">
        <ChildContent>
            <button @onclick="@(() => ToggleFavorite(context))">
                @if (FavoriteZones.Contains(context))
                {
                    <span>&#9733;</span>
                }
                else
                {
                    <span>&#9734;</span>
                }
            </button>
        </ChildContent>
    </TemplateColumn>
</QuickGrid>
<Paginator State="@pagination"></Paginator>

@code {
    [Parameter] public Zone[] AllZones { get; set; } = [];
    [Parameter] public Zone? SelectedZone { get; set; }
    [Parameter] public EventCallback<Zone> OnZoneSelected { get; set; }
    [Parameter] public MyWeatherContext DbContext { get; set; } = null!;

    IQueryable<Zone> zones
    {
        get
        {
            var results = AllZones.AsQueryable();

            if (ShowOnlyFavorites)
            {
                results = results.Where(z => FavoriteZones.Contains(z));
            }

            results = string.IsNullOrEmpty(StateFilter) ? results.AsQueryable()
                : results.Where(z => z.State == StateFilter.ToUpper()).AsQueryable();

            results = string.IsNullOrEmpty(NameFilter) ? results
                : results.Where(z => z.Name.Contains(NameFilter, StringComparison.InvariantCultureIgnoreCase));

            return results.OrderBy(z => z.Name);
        }
    }

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    string NameFilter { get; set; } = string.Empty;
    string StateFilter { get; set; } = string.Empty;

    GridSort<Zone> NameSort = GridSort<Zone>
        .ByAscending(f => f.Name);

    bool ShowOnlyFavorites { get; set; }
    List<Zone> FavoriteZones { get; set; } = new List<Zone>();

    protected override async Task OnInitializedAsync()
    {
        FavoriteZones = await DbContext.FavoriteZones.ToListAsync();
    }

    private async Task ToggleFavorite(Zone zone)
    {
        if (FavoriteZones.Contains(zone))
        {
            FavoriteZones.Remove(zone);
            DbContext.FavoriteZones.Remove(zone);
        }
        else
        {
            FavoriteZones.Add(zone);
            DbContext.FavoriteZones.Add(zone);
        }
        await DbContext.SaveChangesAsync();
    }
}